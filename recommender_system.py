from Algorithms.content_based import ContentBased
from Algorithms.item_based import ItemBased
from Algorithms.user_based import UserBased

class RecommenderSystem:
    def __init__(self, data, n_neighbors, method_name="item_based"):
        """
        Initialize the recommender system.
        
        :param data: The dataset for the recommender system
        :param n_neighbors: Number of neighbors to consider
        :param method_name: The recommendation method to use ("item_based", "user_based", "content_based")
        """
        self.data = data
        self.n_neighbors = n_neighbors
        self.method_name = method_name
        self.model = self._select_model()

    def _select_model(self):
        """
        Select the appropriate recommendation model based on the method name.
        
        :return: An instance of the selected recommendation model
        """
        models = {
            "content_based": ContentBased,
            "user_based": UserBased,
            "item_based": ItemBased
        }
        if self.method_name in models:
            return models[self.method_name](data=self.data, n_neighbors=self.n_neighbors)
        else:
            raise ValueError(f"Invalid method_name: '{self.method_name}'")

    def predict(self, df_ratings_test):
        """
        Generate predictions using the selected recommendation model.
        
        :param df_ratings_test: The test dataset for generating predictions
        :return: The predictions generated by the model
        """
        if self.method_name in ["content_based", "user_based", "item_based"]:
            return self.model.predict(df_ratings_test)
        else:
            raise ValueError(f"Invalid method_name: '{self.method_name}'")
